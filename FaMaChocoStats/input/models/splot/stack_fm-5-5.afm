%Relationships
Stack : [Size]  Element_Type [Optimization] [Counter] [Additional_Features] ;
Size :  Fixed  Dynamic ;
Fixed :  Value ;
Element_Type :  Float  String ;
Optimization :  Speed  Memory_Usage ;
Additional_Features : [1,3] {Thread_Safety Bounds_Check Type_Check };

%Attributes
Value.value: Integer[0 to 10],9,0;
Value.cost: Integer[0 to 10],4,0;
Dynamic.value: Integer[0 to 10],4,0;
Dynamic.cost: Integer[0 to 10],9,0;
Float.value: Integer[0 to 10],9,0;
Float.cost: Integer[0 to 10],2,0;
String.value: Integer[0 to 10],1,0;
String.cost: Integer[0 to 10],2,0;
Speed.value: Integer[0 to 10],3,0;
Speed.cost: Integer[0 to 10],10,0;
Memory_Usage.value: Integer[0 to 10],9,0;
Memory_Usage.cost: Integer[0 to 10],2,0;
Counter.value: Integer[0 to 10],7,0;
Counter.cost: Integer[0 to 10],4,0;
Thread_Safety.value: Integer[0 to 10],3,0;
Thread_Safety.cost: Integer[0 to 10],0,0;
Bounds_Check.value: Integer[0 to 10],4,0;
Bounds_Check.cost: Integer[0 to 10],7,0;
Type_Check.value: Integer[0 to 10],0,0;
Type_Check.cost: Integer[0 to 10],6,0;

%Constraints
Memory_Usage.cost != 2 AND String.value == 5;
Float.value < 0 IMPLIES Speed.value != 9;
Value.cost == 6 IMPLIES Dynamic.value >= 9;
String.cost < 3 IMPLIES Dynamic.value > 1;
Bounds_Check.value != 9 AND Memory_Usage.value != 4;

